/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DreamInterpretation } from "./DreamInterpretation";
import { DreamInterpretationCountArgs } from "./DreamInterpretationCountArgs";
import { DreamInterpretationFindManyArgs } from "./DreamInterpretationFindManyArgs";
import { DreamInterpretationFindUniqueArgs } from "./DreamInterpretationFindUniqueArgs";
import { CreateDreamInterpretationArgs } from "./CreateDreamInterpretationArgs";
import { UpdateDreamInterpretationArgs } from "./UpdateDreamInterpretationArgs";
import { DeleteDreamInterpretationArgs } from "./DeleteDreamInterpretationArgs";
import { DreamRequest } from "../../dreamRequest/base/DreamRequest";
import { DreamInterpretationService } from "../dreamInterpretation.service";
@graphql.Resolver(() => DreamInterpretation)
export class DreamInterpretationResolverBase {
  constructor(protected readonly service: DreamInterpretationService) {}

  async _dreamInterpretationsMeta(
    @graphql.Args() args: DreamInterpretationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DreamInterpretation])
  async dreamInterpretations(
    @graphql.Args() args: DreamInterpretationFindManyArgs
  ): Promise<DreamInterpretation[]> {
    return this.service.dreamInterpretations(args);
  }

  @graphql.Query(() => DreamInterpretation, { nullable: true })
  async dreamInterpretation(
    @graphql.Args() args: DreamInterpretationFindUniqueArgs
  ): Promise<DreamInterpretation | null> {
    const result = await this.service.dreamInterpretation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DreamInterpretation)
  async createDreamInterpretation(
    @graphql.Args() args: CreateDreamInterpretationArgs
  ): Promise<DreamInterpretation> {
    return await this.service.createDreamInterpretation({
      ...args,
      data: {
        ...args.data,

        dreamRequest: args.data.dreamRequest
          ? {
              connect: args.data.dreamRequest,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => DreamInterpretation)
  async updateDreamInterpretation(
    @graphql.Args() args: UpdateDreamInterpretationArgs
  ): Promise<DreamInterpretation | null> {
    try {
      return await this.service.updateDreamInterpretation({
        ...args,
        data: {
          ...args.data,

          dreamRequest: args.data.dreamRequest
            ? {
                connect: args.data.dreamRequest,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DreamInterpretation)
  async deleteDreamInterpretation(
    @graphql.Args() args: DeleteDreamInterpretationArgs
  ): Promise<DreamInterpretation | null> {
    try {
      return await this.service.deleteDreamInterpretation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => DreamRequest, {
    nullable: true,
    name: "dreamRequest",
  })
  async getDreamRequest(
    @graphql.Parent() parent: DreamInterpretation
  ): Promise<DreamRequest | null> {
    const result = await this.service.getDreamRequest(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
