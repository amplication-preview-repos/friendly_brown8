/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DreamInterpretationService } from "../dreamInterpretation.service";
import { DreamInterpretationCreateInput } from "./DreamInterpretationCreateInput";
import { DreamInterpretation } from "./DreamInterpretation";
import { DreamInterpretationFindManyArgs } from "./DreamInterpretationFindManyArgs";
import { DreamInterpretationWhereUniqueInput } from "./DreamInterpretationWhereUniqueInput";
import { DreamInterpretationUpdateInput } from "./DreamInterpretationUpdateInput";

export class DreamInterpretationControllerBase {
  constructor(protected readonly service: DreamInterpretationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DreamInterpretation })
  async createDreamInterpretation(
    @common.Body() data: DreamInterpretationCreateInput
  ): Promise<DreamInterpretation> {
    return await this.service.createDreamInterpretation({
      data: {
        ...data,

        dreamRequest: data.dreamRequest
          ? {
              connect: data.dreamRequest,
            }
          : undefined,
      },
      select: {
        createdAt: true,

        dreamRequest: {
          select: {
            id: true,
          },
        },

        id: true,
        imageUrl: true,
        interpretation: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DreamInterpretation] })
  @ApiNestedQuery(DreamInterpretationFindManyArgs)
  async dreamInterpretations(
    @common.Req() request: Request
  ): Promise<DreamInterpretation[]> {
    const args = plainToClass(DreamInterpretationFindManyArgs, request.query);
    return this.service.dreamInterpretations({
      ...args,
      select: {
        createdAt: true,

        dreamRequest: {
          select: {
            id: true,
          },
        },

        id: true,
        imageUrl: true,
        interpretation: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DreamInterpretation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dreamInterpretation(
    @common.Param() params: DreamInterpretationWhereUniqueInput
  ): Promise<DreamInterpretation | null> {
    const result = await this.service.dreamInterpretation({
      where: params,
      select: {
        createdAt: true,

        dreamRequest: {
          select: {
            id: true,
          },
        },

        id: true,
        imageUrl: true,
        interpretation: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DreamInterpretation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDreamInterpretation(
    @common.Param() params: DreamInterpretationWhereUniqueInput,
    @common.Body() data: DreamInterpretationUpdateInput
  ): Promise<DreamInterpretation | null> {
    try {
      return await this.service.updateDreamInterpretation({
        where: params,
        data: {
          ...data,

          dreamRequest: data.dreamRequest
            ? {
                connect: data.dreamRequest,
              }
            : undefined,
        },
        select: {
          createdAt: true,

          dreamRequest: {
            select: {
              id: true,
            },
          },

          id: true,
          imageUrl: true,
          interpretation: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DreamInterpretation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDreamInterpretation(
    @common.Param() params: DreamInterpretationWhereUniqueInput
  ): Promise<DreamInterpretation | null> {
    try {
      return await this.service.deleteDreamInterpretation({
        where: params,
        select: {
          createdAt: true,

          dreamRequest: {
            select: {
              id: true,
            },
          },

          id: true,
          imageUrl: true,
          interpretation: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
