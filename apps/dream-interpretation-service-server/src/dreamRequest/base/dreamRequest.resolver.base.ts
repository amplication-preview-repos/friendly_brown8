/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DreamRequest } from "./DreamRequest";
import { DreamRequestCountArgs } from "./DreamRequestCountArgs";
import { DreamRequestFindManyArgs } from "./DreamRequestFindManyArgs";
import { DreamRequestFindUniqueArgs } from "./DreamRequestFindUniqueArgs";
import { CreateDreamRequestArgs } from "./CreateDreamRequestArgs";
import { UpdateDreamRequestArgs } from "./UpdateDreamRequestArgs";
import { DeleteDreamRequestArgs } from "./DeleteDreamRequestArgs";
import { DreamInterpretationFindManyArgs } from "../../dreamInterpretation/base/DreamInterpretationFindManyArgs";
import { DreamInterpretation } from "../../dreamInterpretation/base/DreamInterpretation";
import { DreamRequestCreateInput } from "./DreamRequestCreateInput";
import { DreamInterpretationCreateNestedManyWithoutDreamRequestsInput } from "./DreamInterpretationCreateNestedManyWithoutDreamRequestsInput";
import { DreamRequestService } from "../dreamRequest.service";
@graphql.Resolver(() => DreamRequest)
export class DreamRequestResolverBase {
  constructor(protected readonly service: DreamRequestService) {}

  async _dreamRequestsMeta(
    @graphql.Args() args: DreamRequestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DreamRequest])
  async dreamRequests(
    @graphql.Args() args: DreamRequestFindManyArgs
  ): Promise<DreamRequest[]> {
    return this.service.dreamRequests(args);
  }

  @graphql.Query(() => DreamRequest, { nullable: true })
  async dreamRequest(
    @graphql.Args() args: DreamRequestFindUniqueArgs
  ): Promise<DreamRequest | null> {
    const result = await this.service.dreamRequest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DreamRequest)
  async createDreamRequest(
    @graphql.Args() args: CreateDreamRequestArgs
  ): Promise<DreamRequest> {
    return await this.service.createDreamRequest({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DreamRequest)
  async updateDreamRequest(
    @graphql.Args() args: UpdateDreamRequestArgs
  ): Promise<DreamRequest | null> {
    try {
      return await this.service.updateDreamRequest({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DreamRequest)
  async deleteDreamRequest(
    @graphql.Args() args: DeleteDreamRequestArgs
  ): Promise<DreamRequest | null> {
    try {
      return await this.service.deleteDreamRequest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [DreamInterpretation], {
    name: "dreamInterpretations",
  })
  async findDreamInterpretations(
    @graphql.Parent() parent: DreamRequest,
    @graphql.Args() args: DreamInterpretationFindManyArgs
  ): Promise<DreamInterpretation[]> {
    const results = await this.service.findDreamInterpretations(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.Mutation(
    () => DreamInterpretationCreateNestedManyWithoutDreamRequestsInput
  )
  async InterpretDream(
    @graphql.Args()
    args: DreamRequestCreateInput
  ): Promise<DreamInterpretationCreateNestedManyWithoutDreamRequestsInput> {
    return this.service.InterpretDream(args);
  }
}
