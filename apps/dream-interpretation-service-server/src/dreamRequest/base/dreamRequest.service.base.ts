/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  DreamRequest as PrismaDreamRequest,
  DreamInterpretation as PrismaDreamInterpretation,
} from "@prisma/client";

import { DreamRequestCreateInput } from "./DreamRequestCreateInput";
import { DreamInterpretationCreateNestedManyWithoutDreamRequestsInput } from "./DreamInterpretationCreateNestedManyWithoutDreamRequestsInput";

export class DreamRequestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DreamRequestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.dreamRequest.count(args);
  }

  async dreamRequests(
    args: Prisma.DreamRequestFindManyArgs
  ): Promise<PrismaDreamRequest[]> {
    return this.prisma.dreamRequest.findMany(args);
  }
  async dreamRequest(
    args: Prisma.DreamRequestFindUniqueArgs
  ): Promise<PrismaDreamRequest | null> {
    return this.prisma.dreamRequest.findUnique(args);
  }
  async createDreamRequest(
    args: Prisma.DreamRequestCreateArgs
  ): Promise<PrismaDreamRequest> {
    return this.prisma.dreamRequest.create(args);
  }
  async updateDreamRequest(
    args: Prisma.DreamRequestUpdateArgs
  ): Promise<PrismaDreamRequest> {
    return this.prisma.dreamRequest.update(args);
  }
  async deleteDreamRequest(
    args: Prisma.DreamRequestDeleteArgs
  ): Promise<PrismaDreamRequest> {
    return this.prisma.dreamRequest.delete(args);
  }

  async findDreamInterpretations(
    parentId: string,
    args: Prisma.DreamInterpretationFindManyArgs
  ): Promise<PrismaDreamInterpretation[]> {
    return this.prisma.dreamRequest
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .dreamInterpretations(args);
  }
  async InterpretDream(
    args: DreamRequestCreateInput
  ): Promise<DreamInterpretationCreateNestedManyWithoutDreamRequestsInput> {
    throw new Error("Not implemented");
  }
}
